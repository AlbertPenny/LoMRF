//Evidence Predicates
Happens(event, time)
Close(id,id,dist,time)
OrientationMove(id,id,time)
StartTime(time)
Next(time,time)

// Query prediactes
HoldsAt(fluent, time)

//Hidden predicates
InitiatedAt(fluent, time)
TerminatedAt(fluent, time)

//functions: events
event enter(id)
event exit(id)
event walking(id)
event running(id)
event active(id)
event inactive(id)
//functions: fluents
fluent meet(id,id)
fluent fight(id,id)
fluent move(id,id)
fluent leaving_object(id,id)

//DEC7
Next(t1,t0) ^ InitiatedAt(f, t0) => HoldsAt(f, t1).
Next(t1,t0) ^ TerminatedAt(f, t0) => !HoldsAt(f, t1).

Next(t1,t0) ^ HoldsAt(f,t0) ^ !TerminatedAt(f, t0) => HoldsAt(f, t1).
Next(t1,t0) ^ !HoldsAt(f,t0) ^ !InitiatedAt(f, t0) => !HoldsAt(f, t1).

//initially nothing holds:
StartTime(t) => !HoldsAt(f, t).

/**
 * LONG-TERM BEHAVIOUR: fight(Person, Person2)
 */
#include "dec7a_dsa/dsa_fight.mln"
!HoldsAt(fight(p,p),t).

/**
 * LONG-TERM BEHAVIOUR: meet(Person, Person2) 
 */
#include "dec7a_dsa/dsa_meet.mln"
!HoldsAt(meet(p,p), t).

/**
 * LONG-TERM BEHAVIOUR: move(Person, Person2) 
 *
 * Two people are moving together
 */
#include "dec7a_dsa/dsa_move.mln"
!HoldsAt(move(p,p), t).

/**
 * LONG-TERM BEHAVIOUR: leaving_object(Person, Object) 
 */
#include "dec7a_dsa/dsa_leaving_object.mln"
!HoldsAt(leaving_object(obj,obj), t).
